dataframe$report_pratica[[i]] <- dataframe$mappa_pratica_bando[[i]] %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$concesso[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$impegnato[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$liquidato[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$certificato[[i]], by = "COD_LOCALE_PROGETTO") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
mutate(
IMPEGNATO = if(exists("IMPEGNATO", where = .)) IMPEGNATO else NA,
CERTIFICATO = if(exists("CERTIFICATO", where = .)) CERTIFICATO else NA,
LIQUIDATO = if(exists("LIQUIDATO", where = .)) LIQUIDATO else NA,
IMPEGNATO_TR = if(exists("IMPEGNATO_TR", where = .)) IMPEGNATO_TR else NA,
LIQUIDATO_TR = if(exists("LIQUIDATO_TR", where = .)) LIQUIDATO_TR else NA) %>%
mutate_if(is.numeric, replace_na, 0) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE, BANDO = DESCR_PROCEDURA_ATT, ID_PRATICA = COD_LOCALE_PROGETTO) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO, CONCESSO, IMPEGNATO, CERTIFICATO, LIQUIDATO, IMPEGNATO_TR, LIQUIDATO_TR) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA)
dataframe$report_bando[[i]] <- dataframe$report_pratica[[i]] %>%
group_by(ASSE, COD_BANDO, BANDO) %>%
summarise_if(is.numeric, sum)
dataframe$report_asse[[i]] <- dataframe$report_pratica[[i]] %>%
group_by(ASSE) %>%
summarise_if(is.numeric, sum) %>%
janitor::adorn_totals(name = "Totale", where = "row", fill = "")
# report procedurale -----------------------------------------------------------
dataframe$report_procedurale[[i]] <- IGRUE[[i]]$PR00 %>%
replace_na(FLG_CANCELLAZIONE = "") %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(IGRUE$TC$TC46, by = "COD_FASE") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE,
BANDO = DESCR_PROCEDURA_ATT,
ID_PRATICA = COD_LOCALE_PROGETTO,
) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO,
COD_FASE, DESCRIZIONE_FASE,
DATA_INIZIO_PREVISTA, DATA_INIZIO_EFFETTIVA,
DATA_FINE_PREVISTA, DATA_FINE_EFFETTIVA) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA, COD_FASE)
# report beneficiari -----------------------------------------------------------
dataframe$report_beneficiari[[i]] <- IGRUE[[i]]$SC00 %>%
filter(COD_RUOLO_SOG=="2" & FLG_CANCELLAZIONE != "S") %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE,
BANDO = DESCR_PROCEDURA_ATT,
ID_PRATICA = COD_LOCALE_PROGETTO,
DENOMINAZIONE = DENOMINAZIONE_SOG) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO,
CODICE_FISCALE, DENOMINAZIONE, FORMA_GIURIDICA) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA)
#report percettori ----------------------------------------------------------
# if (exists("IGRUE[[i]]$FN08")) {
IGRUE[[i]]$FN08$IMPORTO <- as.double(gsub(",","\\.",IGRUE[[i]]$FN08$IMPORTO))
dataframe$report_percettori[[i]] <- IGRUE[[i]]$FN08 %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
separate(COD_PAGAMENTO, sep="_", into = c("ID_PRATICA", "TRANCHE")) %>%
left_join(richiedente, by = c("ID_PRATICA" = "MON_PRAT_ID","CODICE_FISCALE" = "MON_AZ_RICH_COD_FISC")) %>%
rename(DENOMINAZIONE = MON_AZ_RICH_DENOM) %>%
select(ASSE, COD_PROC_ATT_LOCALE, DESCR_PROCEDURA_ATT, ID_PRATICA, CODICE_FISCALE, DENOMINAZIONE, TRANCHE, DATA_PAGAMENTO, IMPORTO)  %>%
rename_at(vars(c("COD_PROC_ATT_LOCALE", "DESCR_PROCEDURA_ATT")), ~ c("COD_STRUMENTO", "STRUMENTO"))
#}
}
rlang::last_error()
# inizializzo architettura dataframe --------------------------------------------
df <- list(OLD = tibble(), NEW = tibble())
dataframe <- list(
progetti_attivi = df,
progetti_non_attivi = df,
mappa_livello_gerarchico = df,
bandi = df,
mappa_pratica_pratt = df,
mappa_pratica_bando = df,
mappa_pratica_asse = df,
stato_progetto = df,
concesso = df,
impegnato = df,
liquidato = df,
certificato = df
)
rm(df)
# dataframe generali indicatori -------------------------------------------------
dataframe$indicatori_comuni <- IGRUE$TC$TC44 %>%
mutate(
COD_INDICATORE_OUT=
case_when(
str_length(COD_INDICATORE) <= 4 & (str_sub(COD_INDICATORE,1,1) == "1" | str_sub(COD_INDICATORE,1,1) == "2") ~ str_replace(COD_INDICATORE,"[:digit:]","CO"),
TRUE ~ "")) %>%
mutate(COD_INDICATORE_OUT = case_when(COD_INDICATORE_OUT == "" ~ COD_INDICATORE, TRUE ~ COD_INDICATORE_OUT)) %>%
select(COD_INDICATORE, COD_INDICATORE_OUT, DESCRIZIONE_INDICATORE, UNITA_MISURA, DESC_UNITA_MISURA)
dataframe$indicatori_specifici <- IGRUE$TC$TC45 %>%
select(COD_INDICATORE, COD_INDICATORE_OUT, DESCRIZIONE_INDICATORE, UNITA_MISURA, DESC_UNITA_MISURA)
dataframe$indicatori_descrizioni <- rbind(dataframe$indicatori_specifici, dataframe$indicatori_comuni)
# dataframe generali --------------------------------------------------------------------------------------------
# progetti_attivi AP04 dove STATO = 1 --> progetti_attivi ===================================================
for (i in x) {
dataframe$progetti_attivi[[i]] <- IGRUE[[i]]$AP04 %>%
filter(STATO == "1") %>%
left_join(IGRUE[[i]]$AP00, by = "COD_LOCALE_PROGETTO") %>%
filter(FLG_CANCELLAZIONE != "S") %>%
select(COD_LOCALE_PROGETTO)
#  dataframe$progetti_attivi[["NEW"]] <- IGRUE[["NEW"]]$AP04 %>%
#    filter(STATO == "1") %>%
#    left_join(IGRUE[["NEW"]]$AP00, by = "COD_LOCALE_PROGETTO") %>%
#    filter(FLG_CANCELLAZIONE != "S") %>%
#    select(COD_LOCALE_PROGETTO)
# progetti_non_attivi AP04 dove STATO = 1 --> progetti_attivi ===================================================
dataframe$progetti_non_attivi[[i]] <- IGRUE[[i]]$AP04 %>%
filter(STATO != "1") %>%
left_join(IGRUE[[i]]$AP00, by = "COD_LOCALE_PROGETTO") %>%
filter(FLG_CANCELLAZIONE != "S") %>%
select(COD_LOCALE_PROGETTO)
# mappa_scarti ===============================================================
dataframe$mappa_scarti <- readxl::read_excel(pvl03, sheet = 1, skip = 12) %>%
distinct(`Codice Identificativo`) %>%
rename(COD_LOCALE_PROGETTO = `Codice Identificativo`) %>%
mutate(COD_LOCALE_PROGETTO = str_remove(COD_LOCALE_PROGETTO, "LO-6-")) %>%
mutate(COD_LOCALE_PROGETTO = str_trim(COD_LOCALE_PROGETTO, side = c("both", "left", "right")))
# mappa_livello_gerarchico ===================================================================================
# mappa decodifica COD_LIVELLO_GERARCHICO
dataframe$mappa_livello_gerarchico[[i]] <- IGRUE[[i]]$FN01 %>%
filter(COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO & FLG_CANCELLAZIONE != "S") %>%
select(COD_LOCALE_PROGETTO, COD_LIV_GERARCHICO) %>%
left_join(IGRUE$TC$TC36, by = "COD_LIV_GERARCHICO") %>%
separate(VALORE_DATI_RILEVATI,c("COD_PROGRAMMA", "PROGRAMMA", "TIPO_REGIONE", "ASSE", "OT", "PI", "OS"), sep = "#") %>%
separate(DESCRIZIONE_CODICE_LIVELLO_GERARCHICO, c("COD_PROGRAMMA_DESCRIZIONE", "PROGRAMMA_DESCRIZIONE", "TIPO_REGIONE_DESCRIZIONE", "ASSE_DESCRIZIONE", "OT_DESCRIZIONE", "PI_DESCRIZIONE", "OS_DESCRIZIONE"), sep = "\\\\") %>%
mutate(ASSE = paste(TIPO_REGIONE, " - ", ASSE),
ASSE_DESCRIZIONE = paste(TIPO_REGIONE, " - ", TIPO_REGIONE_DESCRIZIONE ," - ",ASSE_DESCRIZIONE),
PI_DESCRIZIONE = paste(PI, " - ", PI_DESCRIZIONE)) %>%
select(COD_LOCALE_PROGETTO, COD_PROGRAMMA, ASSE, ASSE_DESCRIZIONE, PI_DESCRIZIONE, OT, OT_DESCRIZIONE) %>%
mutate(OT=recode(OT, "N.A." = ""))
# bandi =======================================================================================================
dataframe$bandi[[i]] <- IGRUE[[i]]$PA00 %>%
select(COD_PROC_ATT,COD_PROC_ATT_LOCALE,DESCR_PROCEDURA_ATT)
# mappa_pratica_pratt =========================================================================================
dataframe$mappa_pratica_pratt[[i]] <- IGRUE[[i]]$AP01 %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
select(COD_LOCALE_PROGETTO, COD_PROC_ATT)
# mappa_pratica_bando ========================================================================================
dataframe$mappa_pratica_bando[[i]] <- left_join(dataframe$mappa_pratica_pratt[[i]], dataframe$bandi[[i]], by="COD_PROC_ATT")
# mapppa_pratica_asse ===================================================================================================
# mappa decodifica COD_LIVELLO_GERARCHICO rispetto ad [ASSE]
dataframe$mappa_pratica_asse[[i]] <- IGRUE[[i]]$FN01 %>%
filter(COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO & FLG_CANCELLAZIONE != "S") %>%
select(COD_LOCALE_PROGETTO, COD_LIV_GERARCHICO) %>%
left_join(IGRUE$TC$TC36, by = "COD_LIV_GERARCHICO") %>%
left_join(IGRUE[[i]]$AP00, by="COD_LOCALE_PROGETTO") %>%
separate(VALORE_DATI_RILEVATI,c("COD_PROGRAMMA","PROGRAMMA","TIPO_REGIONE","ASSE","OT","PI","OS"), sep = "#") %>%
select(COD_LOCALE_PROGETTO, ASSE, TITOLO_PROGETTO)
# stato_progetto ==============================================================
# mappa decodifica STATO_PROGETTO --> [Stato Pratica] 2=Ammesso e Finanziato, 8 =Chiuso
dataframe$stato_progetto[[i]] <- IGRUE[[i]]$PR01 %>%
filter(COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO & FLG_CANCELLAZIONE != "S") %>%
select(COD_LOCALE_PROGETTO, STATO_PROGETTO) %>%
mutate(STATO_PROGETTO_DESCRIZIONE=recode(STATO_PROGETTO, "2" = "Ammesso e Finanziato", "3"= "Chiuso"))
# concesso  ===================================================================================================
# FN00 su progetti_attivi, per quote ERDF+QA+FPREG non cancellate --> [costo_ammesso]
IGRUE[[i]]$FN00$IMPORTO <- as.double(gsub(",","\\.",IGRUE[[i]]$FN00$IMPORTO))
dataframe$concesso[[i]] <- IGRUE[[i]]$FN00 %>%
filter(COD_FONDO %in% c("FPREG","QA","ERDF") & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO & FLG_CANCELLAZIONE != "S") %>%
group_by(COD_LOCALE_PROGETTO) %>%
summarise(CONCESSO = sum(IMPORTO)) %>%
mutate(CONCESSO = round2(CONCESSO, 2))
# impegnato  ===================================================================================================
# impegnato ##################################################################
# FN05 impegni su progetti_attivi, I-D
#if (exists(IGRUE[[i]]$FN05)) {
IGRUE[[i]]$FN05$IMPORTO_IMP_AMM <- as.double(gsub(",","\\.",IGRUE[[i]]$FN05$IMPORTO_IMP_AMM))
dataframe$impegnato[[i]] <- IGRUE[[i]]$FN05 %>%
filter(FLG_CANCELLAZIONE !="S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
spread(TIPOLOGIA_IMPEGNO, IMPORTO_IMP_AMM) %>%
mutate(
D = if(exists("D", where = .)) D else NA,
I = if(exists("I", where = .)) I else NA,
`I-TR` = if(exists("I-TR", where = .)) `I-TR` else NA,
`D-TR` = if(exists("D-TR", where = .)) `D-TR` else NA
) %>%
replace_na(list(I=0,D=0,`I-TR`=0,`D-TR`=0)) %>%
mutate(IMPEGNATO=I-D, IMPEGNATO_TR=`I-TR`-`D-TR`) %>%
group_by(COD_LOCALE_PROGETTO) %>%
summarise(IMPEGNATO = sum(IMPEGNATO), IMPEGNATO_TR = sum(IMPEGNATO_TR)) %>%
mutate(IMPEGNATO = round2(IMPEGNATO, 2), IMPEGNATO_TR = round2(IMPEGNATO_TR, 2))
#  }
# liquidato  ===================================================================================================
# liquidato ##################################################################
# FN07 pagamenti su progetti_attivi, P-R
#  if (exists("IGRUE[[i]]$FN07")) {
IGRUE[[i]]$FN07$IMPORTO_PAG_AMM <- as.double(gsub(",","\\.",IGRUE[[i]]$FN07$IMPORTO_PAG_AMM))
dataframe$liquidato[[i]] <- IGRUE[[i]]$FN07 %>%
filter(FLG_CANCELLAZIONE !="S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
spread(TIPOLOGIA_PAG_AMM, IMPORTO_PAG_AMM) %>%
mutate(
P = if(exists("P", where = .)) P else NA,
R = if(exists("R", where = .)) R else NA,
`P-TR` = if(exists("P-TR", where = .)) `P-TR` else NA,
`R-TR` = if(exists("R-TR", where = .)) `R-TR` else NA
) %>%
replace_na(list(`P`=0,`R`=0,`P-TR`=0,`R-TR`=0)) %>%
mutate(LIQUIDATO=`P`-`R`, LIQUIDATO_TR=`P-TR`-`R-TR`) %>%
group_by(COD_LOCALE_PROGETTO) %>%
summarise(LIQUIDATO = sum(LIQUIDATO), LIQUIDATO_TR = sum(LIQUIDATO_TR)) %>%
mutate(LIQUIDATO = round2(LIQUIDATO, 2), LIQUIDATO_TR = round2(LIQUIDATO_TR, 2))
#  }
# certificato  ================================================================================================
# FN09 su progetti_attivi, per record non cancellati --> [certificato]
#  if (exists("IGRUE[[i]]$FN09")) {
IGRUE[[i]]$FN09$IMPORTO_SPESA_PUB <- as.double(gsub(",","\\.",IGRUE[[i]]$FN09$IMPORTO_SPESA_PUB))
dataframe$certificato[[i]] <- IGRUE[[i]]$FN09 %>%
filter(FLG_CANCELLAZIONE !="S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
spread(TIPOLOGIA_IMPORTO, IMPORTO_SPESA_PUB) %>%
mutate(
C = if(exists("C", where = .)) C else NA,
D = if(exists("D", where = .)) D else NA) %>%
replace_na(list(C = 0, D = 0)) %>%
mutate(CERTIFICATO=C-D) %>%
group_by(COD_LOCALE_PROGETTO) %>%
summarise(CERTIFICATO = sum(CERTIFICATO)) %>%
mutate(CERTIFICATO = round2(CERTIFICATO, 2))
#  }
# report indicatori --------------------------------------------------------------------------------------------
dataframe$report_indicatori[[i]] <- IGRUE[[i]]$IN01 %>%
#replace_na(FLG_CANCELLAZIONE = "") %>%
mutate(VAL_PROGRAMMATO = as.double(str_replace(VAL_PROGRAMMATO, ",", ".")),
`VALORE_REALIZZATO` = as.double(str_replace({if("VALORE REALIZZATO" %in% names(.)) `VALORE REALIZZATO` else `VALORE_REALIZZATO`}, ",", "."))) %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$indicatori_descrizioni, by = "COD_INDICATORE") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE,
BANDO = DESCR_PROCEDURA_ATT,
ID_PRATICA = COD_LOCALE_PROGETTO,
TIPO_INDICATORE = TIPO_INDICATORE_DI_OUTPUT,
VALORE_PROGRAMMATO = VAL_PROGRAMMATO,
VALORE_REALIZZATO = `VALORE_REALIZZATO`,
COD_INDICATORE_IGRUE = COD_INDICATORE,
COD_INDICATORE = COD_INDICATORE_OUT) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO,
TIPO_INDICATORE, COD_INDICATORE, DESCRIZIONE_INDICATORE,
UNITA_MISURA, VALORE_PROGRAMMATO, VALORE_REALIZZATO) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA, COD_INDICATORE)
# report economics ------------------------------------------------------------
dataframe$report_pratica[[i]] <- dataframe$mappa_pratica_bando[[i]] %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$concesso[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$impegnato[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$liquidato[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$certificato[[i]], by = "COD_LOCALE_PROGETTO") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
mutate(
IMPEGNATO = if(exists("IMPEGNATO", where = .)) IMPEGNATO else NA,
CERTIFICATO = if(exists("CERTIFICATO", where = .)) CERTIFICATO else NA,
LIQUIDATO = if(exists("LIQUIDATO", where = .)) LIQUIDATO else NA,
IMPEGNATO_TR = if(exists("IMPEGNATO_TR", where = .)) IMPEGNATO_TR else NA,
LIQUIDATO_TR = if(exists("LIQUIDATO_TR", where = .)) LIQUIDATO_TR else NA) %>%
mutate_if(is.numeric, replace_na, 0) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE, BANDO = DESCR_PROCEDURA_ATT, ID_PRATICA = COD_LOCALE_PROGETTO) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO, CONCESSO, IMPEGNATO, CERTIFICATO, LIQUIDATO, IMPEGNATO_TR, LIQUIDATO_TR) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA)
dataframe$report_bando[[i]] <- dataframe$report_pratica[[i]] %>%
group_by(ASSE, COD_BANDO, BANDO) %>%
summarise_if(is.numeric, sum)
dataframe$report_asse[[i]] <- dataframe$report_pratica[[i]] %>%
group_by(ASSE) %>%
summarise_if(is.numeric, sum) %>%
janitor::adorn_totals(name = "Totale", where = "row", fill = "")
# report procedurale -----------------------------------------------------------
dataframe$report_procedurale[[i]] <- IGRUE[[i]]$PR00 %>%
#replace_na(FLG_CANCELLAZIONE = "") %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(IGRUE$TC$TC46, by = "COD_FASE") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE,
BANDO = DESCR_PROCEDURA_ATT,
ID_PRATICA = COD_LOCALE_PROGETTO,
) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO,
COD_FASE, DESCRIZIONE_FASE,
DATA_INIZIO_PREVISTA, DATA_INIZIO_EFFETTIVA,
DATA_FINE_PREVISTA, DATA_FINE_EFFETTIVA) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA, COD_FASE)
# report beneficiari -----------------------------------------------------------
dataframe$report_beneficiari[[i]] <- IGRUE[[i]]$SC00 %>%
filter(COD_RUOLO_SOG=="2" & FLG_CANCELLAZIONE != "S") %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
filter(!COD_LOCALE_PROGETTO %in% dataframe$mappa_scarti$COD_LOCALE_PROGETTO) %>%
rename(COD_BANDO = COD_PROC_ATT_LOCALE,
BANDO = DESCR_PROCEDURA_ATT,
ID_PRATICA = COD_LOCALE_PROGETTO,
DENOMINAZIONE = DENOMINAZIONE_SOG) %>%
select(ASSE, COD_BANDO, BANDO, ID_PRATICA, TITOLO_PROGETTO,
CODICE_FISCALE, DENOMINAZIONE, FORMA_GIURIDICA) %>%
arrange(ASSE, COD_BANDO, ID_PRATICA)
#report percettori ----------------------------------------------------------
# if (exists("IGRUE[[i]]$FN08")) {
IGRUE[[i]]$FN08$IMPORTO <- as.double(gsub(",","\\.",IGRUE[[i]]$FN08$IMPORTO))
dataframe$report_percettori[[i]] <- IGRUE[[i]]$FN08 %>%
filter(FLG_CANCELLAZIONE != "S" & COD_LOCALE_PROGETTO %in% dataframe$progetti_attivi[[i]]$COD_LOCALE_PROGETTO) %>%
left_join(dataframe$mappa_pratica_bando[[i]], by = "COD_LOCALE_PROGETTO") %>%
left_join(dataframe$mappa_pratica_asse[[i]], by = "COD_LOCALE_PROGETTO") %>%
separate(COD_PAGAMENTO, sep="_", into = c("ID_PRATICA", "TRANCHE")) %>%
left_join(richiedente, by = c("ID_PRATICA" = "MON_PRAT_ID","CODICE_FISCALE" = "MON_AZ_RICH_COD_FISC")) %>%
rename(DENOMINAZIONE = MON_AZ_RICH_DENOM) %>%
select(ASSE, COD_PROC_ATT_LOCALE, DESCR_PROCEDURA_ATT, ID_PRATICA, CODICE_FISCALE, DENOMINAZIONE, TRANCHE, DATA_PAGAMENTO, IMPORTO)  %>%
rename_at(vars(c("COD_PROC_ATT_LOCALE", "DESCR_PROCEDURA_ATT")), ~ c("COD_STRUMENTO", "STRUMENTO"))
#}
}
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_official"#"FESR_simulazione"
x <- c("OLD", "NEW")
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_official"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_official"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
rlang::last_error()
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
rlang::last_error()
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
View(dataframe)
View(dataframe[["progetti_attivi"]][["OLD"]])
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_official"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
source("R/00_librerie.R")
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
View(dataframe)
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_official"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
source("R/report_indicatori.R")
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
source("R/report_indicatori.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
# configurazioni -------------------------------------------------------------
fondo = "FESR"
dsn_igrue_old = "FESR_official"
dsn_igrue_new = "FESR_simulazione"#"FESR_simulazione"
x <- c("OLD", "NEW")
pvl03 <- "C:\\Users\\Roberto\\Google Drive\\Monitoraggio\\IGRUE\\FESR\\Invio\\2019_11\\prevalidazione\\PVL-03_XLS_279070.xls" # path e file excel del report di prevalidazione/validazione 03
# carica sorgenti ------------------------------------------------------------
source("R/00_librerie.R")
source("R/01a_connessioni_igrue.R")
#source("R/01b_connessioni_siage.R")
source("R/02_dataframe.R")
source("R/report_stili_excel.R")
# genera reports -------------------------------------------------------------
source("R/report_economics.R")
